{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","alt","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wTAuBeA,EAnBCC,sBAAW,WAAsBC,GAAQ,IAA5BC,EAA2B,EAA3BA,QACnBC,EAD8C,EAAlBC,WACNF,EAAQE,SACpC,OACA,yBAAKH,IAAMA,EAAKI,UAAS,kBAAeF,GAAU,kBAC9C,kBAACG,EAAA,EAAD,CAAMD,UAAaF,EAAS,oBAAsB,sBAClD,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,UACNC,QAAQ,KACRC,UAAU,OAETR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,KALJ,IAK0DF,EAAQA,e,iCCC/DU,EAdKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,kDACbC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIIC,Y,iCCqDNC,MAzDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGNrB,EAHM,KAGI0B,EAHJ,KA2Bb,OAtBAC,qBAAU,WACRnB,EAAGoB,WAAW,YACbC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAI,CAACC,GAAID,EAAIC,GAAIrC,QAASoC,EAAIE,iBAGhE,CAACd,IAEJK,qBAAU,WACRD,EAAYW,OAAO,6BAClB,IAYD,yBAAKpC,UAAU,OACb,yBAAKqC,IAAK,6FAA6FC,IAAM,aAC/G,uCAAavC,GAEf,0BAAMC,UAAY,aACf,kBAACuC,EAAA,EAAD,CAAavC,UAAY,oBACxB,kBAACwC,EAAA,EAAD,CAAOxC,UAAW,aAAayC,YAAc,mBAAmBC,MAASrB,EAAOsB,SAAW,SAAAC,GAAK,OAAGtB,EAASsB,EAAMC,OAAOH,UAEzH,kBAACI,EAAA,EAAD,CAAY9C,UAAY,kBAAkB+C,UAAa1B,EAAOhB,QAAQ,YAAYD,MAAO,UAAU4C,KAAO,SAASC,QAlBnG,SAACL,GACnBA,EAAMM,iBACN3C,EAAGoB,WAAW,YAAYwB,IAAI,CAC5BtD,QAASwB,EACTtB,SAAUA,EACVqD,UAAW5C,IAASU,UAAUmC,WAAWC,oBAE3ChC,EAAS,MAYL,kBAAC,IAAD,SASJ,kBAAC,IAAD,KAEEC,EAASS,KAAI,gBAAEnC,EAAF,EAAEA,QAASqC,EAAX,EAAWA,GAAX,OACX,kBAAC,EAAD,CAASqB,IAAMrB,EAAInC,SAAYA,EAAWF,QAAWA,UC/CzC2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5E,c","file":"static/js/main.33ba7536.chunk.js","sourcesContent":["import React, {forwardRef } from 'react';\r\nimport './Message.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\n\r\nconst Message = forwardRef(({message, username}, ref) =>{\r\n    const isUser = username === message.username;\r\n    return (\r\n    <div ref ={ref} className = {`message ${isUser && 'message__user'}`}>\r\n        <Card className = {isUser ? 'message__userCard' : 'message__guestCard'}>\r\n        <CardContent>\r\n            <Typography \r\n                color=\"initial\" \r\n                variant=\"h5\"\r\n                component=\"h2\"\r\n            >\r\n               {!isUser && `${message.username || 'Unknown User'}:`} {message.message}\r\n            </Typography>\r\n        </CardContent>\r\n        </Card>\r\n    </div>\r\n    )\r\n})\r\n\r\nexport default Message\r\n","import firebase from 'firebase'\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyCe6UGokmPzdLnULUAAriwd7IvKAOJGkX4\",\r\n  authDomain: \"facebook-messenger-dec35.firebaseapp.com\",\r\n  databaseURL: \"https://facebook-messenger-dec35.firebaseio.com\",\r\n  projectId: \"facebook-messenger-dec35\",\r\n  storageBucket: \"facebook-messenger-dec35.appspot.com\",\r\n  messagingSenderId: \"551517364093\",\r\n  appId: \"1:551517364093:web:4f32fbd8096ecad7823614\",\r\n  measurementId: \"G-7790LVSNWL\"\r\n})\r\n\r\n\r\nconst db=firebaseApp.firestore();\r\n\r\nexport default db","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Message from './Message';\nimport {Button, FormControl, InputLabel, Input} from '@material-ui/core'\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport { IconButton } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState('');\n\n  useEffect(() => {\n    db.collection('messages')\n    .orderBy('timestamp', 'desc')\n    .onSnapshot(snapshot =>{\n      setMessages(snapshot.docs.map(doc =>({id: doc.id, message: doc.data()}\n      )))\n    })\n  }, [input])\n\n  useEffect(() => {\n    setUsername(prompt('Please enter your name'));\n  }, []) //condition If it is [] blank it just runs onces when component loads\n\n  const sendMessage = (event) =>{\n    event.preventDefault()\n    db.collection('messages').add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setInput('');\n  }\n  return (\n    <div className=\"App\">\n      <img src= \"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\" alt = \"No Image\"/>\n    <h2>Welcome {username}</h2>\n\n  <form className = \"app__form\">\n     <FormControl className = \"app__formControl\">\n      <Input className= \"app__input\" placeholder = \"Enter message...\" value = {input} onChange ={event =>setInput(event.target.value)} />\n     \n      <IconButton className = \"app__iconButton\" disabled = {!input} variant=\"contained\" color= \"primary\" type = \"submit\" onClick = {sendMessage}>\n        <SendIcon/>\n      </IconButton>\n    </FormControl>\n      \n  </form>\n    \n\n    {/* Message Goes here */}\n\n    <FlipMove>\n    {\n      messages.map(({message, id}) =>(\n        <Message key ={id} username = {username}  message = {message}/>\n      ))\n    }\n    </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}